// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggerClient is the client API for Trigger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerClient interface {
	// FetchResource fetches the resource to be triggered.
	FetchResource(ctx context.Context, in *FetchResourceRequest, opts ...grpc.CallOption) (*FetchResourceResponse, error)
	// Execute executes the requested trigger resource.
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	// ApplyPolicy applies policies on the trigger execution result.
	ApplyPolicy(ctx context.Context, in *ApplyPolicyRequest, opts ...grpc.CallOption) (*ApplyPolicyResponse, error)
}

type triggerClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerClient(cc grpc.ClientConnInterface) TriggerClient {
	return &triggerClient{cc}
}

func (c *triggerClient) FetchResource(ctx context.Context, in *FetchResourceRequest, opts ...grpc.CallOption) (*FetchResourceResponse, error) {
	out := new(FetchResourceResponse)
	err := c.cc.Invoke(ctx, "/triggers.Trigger/FetchResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/triggers.Trigger/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerClient) ApplyPolicy(ctx context.Context, in *ApplyPolicyRequest, opts ...grpc.CallOption) (*ApplyPolicyResponse, error) {
	out := new(ApplyPolicyResponse)
	err := c.cc.Invoke(ctx, "/triggers.Trigger/ApplyPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServer is the server API for Trigger service.
// All implementations must embed UnimplementedTriggerServer
// for forward compatibility
type TriggerServer interface {
	// FetchResource fetches the resource to be triggered.
	FetchResource(context.Context, *FetchResourceRequest) (*FetchResourceResponse, error)
	// Execute executes the requested trigger resource.
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	// ApplyPolicy applies policies on the trigger execution result.
	ApplyPolicy(context.Context, *ApplyPolicyRequest) (*ApplyPolicyResponse, error)
	mustEmbedUnimplementedTriggerServer()
}

// UnimplementedTriggerServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerServer struct {
}

func (UnimplementedTriggerServer) FetchResource(context.Context, *FetchResourceRequest) (*FetchResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchResource not implemented")
}
func (UnimplementedTriggerServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedTriggerServer) ApplyPolicy(context.Context, *ApplyPolicyRequest) (*ApplyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPolicy not implemented")
}
func (UnimplementedTriggerServer) mustEmbedUnimplementedTriggerServer() {}

// UnsafeTriggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerServer will
// result in compilation errors.
type UnsafeTriggerServer interface {
	mustEmbedUnimplementedTriggerServer()
}

func RegisterTriggerServer(s grpc.ServiceRegistrar, srv TriggerServer) {
	s.RegisterService(&Trigger_ServiceDesc, srv)
}

func _Trigger_FetchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServer).FetchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/triggers.Trigger/FetchResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServer).FetchResource(ctx, req.(*FetchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trigger_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/triggers.Trigger/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trigger_ApplyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServer).ApplyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/triggers.Trigger/ApplyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServer).ApplyPolicy(ctx, req.(*ApplyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Trigger_ServiceDesc is the grpc.ServiceDesc for Trigger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trigger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "triggers.Trigger",
	HandlerType: (*TriggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchResource",
			Handler:    _Trigger_FetchResource_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Trigger_Execute_Handler,
		},
		{
			MethodName: "ApplyPolicy",
			Handler:    _Trigger_ApplyPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/trigger.proto",
}
